#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };
&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <100>;
    delay-ms = <0>;
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    combos {
        compatible = "zmk,combos";

        enter {
            bindings = <&kp ENTER>;
            key-positions = <7 8 9>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <2 3>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <7 8>;
        };
    };

    behaviors {
        hold_tap_left: hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hold_tap_right: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "BASE";
            bindings = <
&kp TILDE  &kp B  &kp L      &kp D  &kp W  &kp Z  &kp SINGLE_QUOTE  &kp F  &kp O  &kp U  &kp J  &kp SEMICOLON
&none      &kp N  &hold_tap_left LGUI R  &hold_tap_left LEFT_ALT T  &hold_tap_left LCTRL S  &kp G  &kp Y  &hold_tap_right RCTRL H  &hold_tap_right RIGHT_ALT A  &hold_tap_right RIGHT_GUI E  &kp I  &kp COMMA
&lt 3 TAB  &kp Q  &kp X  &kp M  &kp C  &kp V  &kp K  &kp P  &kp PERIOD  &kp MINUS  &kp FSLH  &kp EXCLAMATION
                      &mt LC(LS(LA(LGUI))) ESCAPE  &kp BACKSPACE  &lt 1 SPACE  &lt 2 ENTER  &kp RIGHT_SHIFT  &kp Q
            >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        function_layer {
            display-name = "FUNC";
            bindings = <
&trans  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5  &trans  &kp K_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans  &kp BSPC
&none   &kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans  &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans
&none   &kp F11  &kp F12  &trans  &trans  &kp LG(LS(NUMBER_4))  &trans  &kp LA(LEFT)  &kp LA(RIGHT)  &trans  &trans  &trans
                      &trans  &trans  &trans  &trans  &trans  &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        symbol_layer {
            display-name = "SYMB";
            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT  &kp PLUS  &kp N7  &kp N8  &kp N9  &kp ASTERISK  &none
&trans  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE  &kp UNDER  &kp PLUS  &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
&kp LSHFT  &kp PERCENT  &kp CARET  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp AMPERSAND  &kp EQUAL  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUBS  &none
                      &trans  &trans  &trans  &trans  &trans  &kp N0
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        windows_layer {
            display-name = "WIN";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LA(LS(KP_NUMBER_7))  &kp LS(LA(KP_NUMBER_8))  &kp LA(LS(KP_NUMBER_9))  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LA(LS(KP_NUMBER_4))  &kp LS(LA(KP_NUMBER_5))  &kp LA(LS(KP_NUMBER_6))  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LA(LS(KP_NUMBER_1))  &kp LA(LS(KP_NUMBER_2))  &kp LA(LS(KP_NUMBER_3))  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
