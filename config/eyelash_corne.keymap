#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };
&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <100>;
    delay-ms = <0>;
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    combos {
        compatible = "zmk,combos";

        enter {
            bindings = <&kp ENTER>;
            key-positions = <7 8 9>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <2 3>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <7 8>;
        };
    };

    behaviors {
        hold_tap_left: hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hold_tap_right: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "BASE";
            bindings = <
&kp TAB   &kp Q  &kp W      &kp E      &kp R      &kp T      &none   &kp Y      &kp U      &kp I      &kp O      &kp P      &kp BSPC
&kp LCTRL &kp A  &kp S      &kp D      &kp F      &kp G      &none   &kp H      &kp J      &kp K      &kp L      &kp SEMI   &kp SQT
&kp LSHFT &kp Z  &kp X      &kp C      &kp V      &kp B      &none   &kp N      &kp M      &kp COMMA  &kp DOT    &kp FSLH   &kp ESC
                        &kp LGUI  &mo 1  &lt 3 SPACE  &none   &lt 3 ENTER  &mo 2  &kp RALT
            >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        function_layer {
            display-name = "FUNC";
            bindings = <
&none  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &none  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp BSPC
&none  &kp F11  &kp F12  &none  &none  &none  &none  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp HOME  &kp PG_UP
&none  &none  &none  &none  &none  &none  &none  &kp INS  &kp DEL  &kp END  &kp PG_DN  &kp ESC  &kp ENTER
                        &none  &none  &none  &none  &none  &none  &none
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        symbol_layer {
            display-name = "SYMB";
            bindings = <
&none  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT  &none  &kp CARET  &kp AMPS  &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&none  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH  &none  &kp UNDER  &kp PLUS  &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
&none  &none  &none  &none  &none  &none  &none  &kp HOME  &kp END  &kp PG_UP  &kp PG_DN  &kp ESC  &kp ENTER
                        &none  &none  &none  &none  &none  &none  &none
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        windows_layer {
            display-name = "WIN";
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &kp LA(LS(KP_NUMBER_7))  &kp LS(LA(KP_NUMBER_8))  &kp LA(LS(KP_NUMBER_9))  &none  &none
&none  &none  &none  &none  &none  &none  &none  &kp LA(LS(KP_NUMBER_4))  &kp LS(LA(KP_NUMBER_5))  &kp LA(LS(KP_NUMBER_6))  &none  &none
&none  &none  &none  &none  &none  &none  &none  &kp LA(LS(KP_NUMBER_1))  &kp LA(LS(KP_NUMBER_2))  &kp LA(LS(KP_NUMBER_3))  &none  &none
                        &none  &none  &none  &none  &none  &none  &none
            >;
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
