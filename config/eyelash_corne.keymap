#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener {
    input-processors = <&zip_xy_scaler 2 1>;
};

&msc_input_listener {
    input-processors = <&zip_scroll_scaler 2 1>;
};

&msc {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <100>;
    delay-ms = <0>;
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
combos {
        compatible = "zmk,combos";

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <7 8 9>;
            layers = <0>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <2 3>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <7 8>;
        };

        Iock {
            bindings = <&kp K_LOCK>;
            key-positions = <17 18>;
        };

        equals {
            bindings = <&kp EQUAL>;
            key-positions = <30 31>;
        };
    };

    behaviors {
        hold_tap_left: hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
        hold_tap_right: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        /*******************************************************
         * BASE LAYER (Old Corne “BASE”)
         * — 4 “rows” here: top row, home row, bottom row, thumbs
         *******************************************************/
        base_layer {
            display-name = "BASE";
            bindings = <
                /* Row 0 (12 keys) => Left 6, Right 6 */
                &kp TILDE  &kp B  &kp L  &kp D  &kp W  &kp Z
                &kp SINGLE_QUOTE  &kp F  &kp O  &kp U  &kp J  &kp SEMICOLON

                /* Row 1 (12 keys) => Left 6, Right 6 */
                &none      &kp N  &hold_tap_left LGUI R    &hold_tap_left LEFT_ALT T
                &hold_tap_left LCTRL S    &kp G
                &kp Y      &hold_tap_right RCTRL H
                &hold_tap_right RIGHT_ALT A   &hold_tap_right RIGHT_GUI E
                &kp I      &kp COMMA

                /* Row 2 (12 keys) => Left 6, Right 6 */
                &lt 3 TAB  &kp Q  &kp X  &kp M  &kp C  &kp V
                &kp K      &kp P  &kp PERIOD  &kp MINUS  &kp FSLH  &kp EXCLAMATION

                /* Row 3 (6 keys) => Thumb row */
                &mt LC(LS(LA(LGUI))) ESCAPE   &kp BACKSPACE
                &lt 1 SPACE   &lt 2 ENTER   &kp RIGHT_SHIFT   &kp Q
            >;
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        /*******************************************************
         * FUNCTION LAYER (Old “FUNC”)
         *******************************************************/
        function_layer {
            display-name = "FUNC";
            bindings = <
                /* Row 0 (12 keys) */
                &trans &kp F1 &kp F2 &kp F3 &kp F4 &kp F5
                &trans &kp K_PLAY_PAUSE &kp C_VOLUME_DOWN &kp C_VOLUME_UP &trans &kp BSPC

                /* Row 1 (12 keys) */
                &none &kp F6 &kp F7 &kp F8 &kp F9 &kp F10
                &trans &kp LEFT &kp DOWN_ARROW &kp UP_ARROW &kp RIGHT &trans

                /* Row 2 (12 keys) */
                &none &kp F11 &kp F12 &trans &trans &kp LG(LS(NUMBER_4))
                &trans &kp LA(LEFT) &kp LA(RIGHT) &trans &trans &trans

                /* Row 3 (6 keys) => thumbs */
                &trans &trans &trans &trans &trans &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        /*******************************************************
         * SYMBOL LAYER (Old “SYMB”)
         *******************************************************/
        symbol_layer {
            display-name = "SYMB";
            bindings = <
                /* Row 0 (12 keys) */
                &trans  &kp EXCL  &kp AT  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp PIPE
                &kp PLUS  &kp N7  &kp N8  &kp N9  &kp ASTERISK  &none

                /* Row 1 (12 keys) */
                &trans  &kp MINUS &kp EQUAL &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp GRAVE
                &kp MINUS &kp NUMBER_4 &kp N5 &kp NUMBER_6 &kp SEMICOLON &none

                /* Row 2 (12 keys) */
                &kp LSHFT  &kp PERCENT  &kp CARET  &kp LEFT_BRACKET
                &kp RIGHT_BRACKET  &kp AMPERSAND  &kp EQUAL  &kp NUMBER_1
                &kp NUMBER_2  &kp NUMBER_3  &kp NUBS  &none

                /* Row 3 (6 keys) => thumbs */
                &trans  &trans  &trans  &trans  &trans  &kp N0
            >;
            sensor-bindings = <&scroll_encoder>;
        };

        /*******************************************************
         * WINDOWS LAYER (Old “WIN”)
         *******************************************************/
        windows_layer {
            display-name = "WIN";
            bindings = <
                /* Row 0 (12 keys) */
                &trans &trans &trans &trans &trans &trans
                &trans &kp LA(LS(KP_NUMBER_7)) &kp LS(LA(KP_NUMBER_8))
                &kp LA(LS(KP_NUMBER_9)) &trans &trans

                /* Row 1 (12 keys) */
                &trans &trans &trans &trans &trans &trans
                &trans &kp LA(LS(KP_NUMBER_4)) &kp LS(LA(KP_NUMBER_5))
                &kp LA(LS(KP_NUMBER_6)) &trans &trans

                /* Row 2 (12 keys) */
                &trans &trans &trans &trans &trans &trans
                &trans &kp LA(LS(KP_NUMBER_1)) &kp LA(LS(KP_NUMBER_2))
                &kp LA(LS(KP_NUMBER_3)) &trans &trans

                /* Row 3 (6 keys) => thumbs */
                &trans &trans &trans &trans &trans &trans
            >;
            sensor-bindings = <&scroll_encoder>;
        };
    };
};